# docker-compose -p my-project up
# or
# export COMPOSE_PROJECT_NAME=my-project
# docker-compose up
#
services:
  # Core Confluent Kafka bits
  broker:
    image: confluentinc/cp-kafka:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-broker
    hostname: ${COMPOSE_PROJECT_NAME}-broker
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://${COMPOSE_PROJECT_NAME}-broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@${COMPOSE_PROJECT_NAME}-broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://${COMPOSE_PROJECT_NAME}-broker:29092,CONTROLLER://${COMPOSE_PROJECT_NAME}-broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-schema-registry
    hostname: ${COMPOSE_PROJECT_NAME}-schema-registry
    depends_on:
      - broker
    ports:
      - "9081:9081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: ${COMPOSE_PROJECT_NAME}-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: '${COMPOSE_PROJECT_NAME}-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:9081
      
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-control-center
    hostname: ${COMPOSE_PROJECT_NAME}-control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: '${COMPOSE_PROJECT_NAME}-broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: '${COMPOSE_PROJECT_NAME}-connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://${COMPOSE_PROJECT_NAME}-ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://${COMPOSE_PROJECT_NAME}-schema-registry:9081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  connect:
    build:
      context: .
      dockerfile: connect/Dockerfile
    image: kafka-connect-custom:1.2
    container_name: ${COMPOSE_PROJECT_NAME}-connect
    hostname: ${COMPOSE_PROJECT_NAME}-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '${COMPOSE_PROJECT_NAME}-broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: ${COMPOSE_PROJECT_NAME}-connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://${COMPOSE_PROJECT_NAME}-schema-registry:9081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
#    volumes:
#      - ./demo-scene/csv-to-kafka/data:/data

  # Confluent ksql server
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-ksqldb-server
    hostname: ${COMPOSE_PROJECT_NAME}-ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "${COMPOSE_PROJECT_NAME}-broker:29092"
      KSQL_HOST_NAME: ${COMPOSE_PROJECT_NAME}-ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://${COMPOSE_PROJECT_NAME}-schema-registry:9081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://${COMPOSE_PROJECT_NAME}-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-ksqldb-cli
    hostname: ${COMPOSE_PROJECT_NAME}-ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./:/data
    

  kcat:
    image: confluentinc/cp-kcat:7.6.1
    container_name: ${COMPOSE_PROJECT_NAME}-kcat
    hostname: ${COMPOSE_PROJECT_NAME}-kcat
    depends_on:
      - broker
      - schema-registry
    entrypoint: /bin/bash -i
    tty: true


  # Apache Flink bits    
  flink-jobmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    image: apacheflink_pod:1.18.1-scala_2.12-java11-b
    container_name: ${COMPOSE_PROJECT_NAME}-flink-jobmanager
    hostname: ${COMPOSE_PROJECT_NAME}-flink-jobmanager
    depends_on:
      - postgres
      - minio
    ports:
      - 8081:8081
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: ${COMPOSE_PROJECT_NAME}-flink-jobmanager
        rest.bind-port: 8081
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=za-south-1

  flink-taskmanager:
    image: apacheflink_pod:1.18.1-scala_2.12-java11-b
    hostname: ${COMPOSE_PROJECT_NAME}-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    deploy:
      replicas: 2
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: ${COMPOSE_PROJECT_NAME}-flink-jobmanager
        taskmanager.numberOfTaskSlots: 10
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=za-south-1

  flink-sql-client:
    build:
      context: .
      dockerfile: sql-client/Dockerfile
    image: apacheflink_sqlpod:1.18.1-scala_2.12-java11-b
    container_name: ${COMPOSE_PROJECT_NAME}-flink-sql-client
    hostname: ${COMPOSE_PROJECT_NAME}-flink-sql-client
    depends_on:
      - flink-jobmanager
      - flink-taskmanager
    environment:
      - FLINK_JOBMANAGER_HOST=${COMPOSE_PROJECT_NAME}-flink-jobmanager
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=za-south-1
  

  # The below Iceberg bits come from Robbin Moffats Kafka to Iceberg blog
  # https://www.decodable.co/blog/kafka-to-iceberg-with-flink
  #
  # S3-Amazon Compatible store, as storage for Iceberg
  # http://localhost:9001/browser
  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    ports:
      - 9001:9001  # Web console
      - 9000:9000  # api address
    command: ["server", "/data", "--console-address", ":9001"]


  # https://hub.docker.com/r/minio/mc
  # Minio Client
  mc:
    image: minio/mc:latest
    container_name: mc
    hostname: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      tail -f /dev/null
      " 


  postgres:
     image: postgres:14.12-bullseye
     hostname: postgres
     container_name: postgres
     restart: no
     ports:
       - "5432:5432"
     environment:
       - POSTGRES_USER=dba
       - POSTGRES_PASSWORD=rules


# Without a network explicitly defined, you hit this Hive/Thrift error
# java.net.URISyntaxException Illegal character in hostname
# https://github.com/TrivadisPF/platys-modern-data-platform/issues/231
networks:
  default:
     name: ${COMPOSE_PROJECT_NAME}